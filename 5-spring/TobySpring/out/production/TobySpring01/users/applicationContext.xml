<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/aop
            http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context-3.0.xsd
            http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
            http://www.springframework.org/schema/jdbc
            http://www.springframework.org/schema/jdbc/spring-jdbc.xsd">
    <!--<bean id="connectionMaker"-->
        <!--class="dao.DConnectionMaker" />-->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
        <property name="driverClass" value="com.mysql.jdbc.Driver" />
        <property name="url" value="Jdbc:mysql://localhost/toby?autoReconnect=true&amp;useSSL=false" />
        <property name="username" value="study" />
        <property name="password" value="1111" />
    </bean>
    <!--<bean id="jdbcContext" class="_etc.template.JdbcContext">-->
        <!--<property name="dataSource" ref="dataSource" />-->
    <!--</bean>-->
    <!--<bean id="userDao" class="_etc.template.UserDao">-->
        <!--<property name="dataSource" ref="dataSource" />-->
        <!--<property name="connectionMaker" ref="connectionMaker" />-->
        <!--<property name="jdbcContext" ref="jdbcContext" />-->
    <!--</bean>-->
    <bean id="userDao" class="users.dao.UserDaoJdbc">
        <property name="dataSource" ref="dataSource" />
        <!--<property name="sqlService" ref="sqlService" />-->
        <!--<property name="sqlMap">-->
            <!--<map>-->
                <!--<entry key="add"-->
                       <!--value="INSERT INTO users(id, name, password, email, level, login, recommend)-->
                              <!--VALUES (?,?,?,?,?,?,?)" />-->
                <!--<entry key="get"-->
                       <!--value="SELECT * FROM users WHERE id = ?" />-->
            <!--</map>-->
        <!--</property>-->
    </bean>
    <!--<bean id="userService" class="service.UserService">-->
        <!--<property name="userDao" ref="userDaoJdbc" />-->
        <!--<property name="transactionManager" ref="transactionManager" />-->
        <!--<property name="mailSender" ref="mailSender" />-->
        <!--<property name="dataSource" ref="dataSource" />-->
    <!--</bean>-->
    <!--<bean id="userService" class="service.UserServiceTx">-->
        <!--<property name="transactionManager" ref="transactionManager" />-->
        <!--<property name="userService" ref="userServiceImpl" />-->
    <!--</bean>-->
    <!--<bean id="userService" class="service.TxProxyFactoryBean">-->
        <!--<property name="target" ref="userServiceImpl" />-->
        <!--<property name="transactionManager" ref="transactionManager" />-->
        <!--<property name="pattern" value="upgradeLevels" />-->
        <!--<property name="serviceInterface" value="service.UserService" />-->
    <!--</bean>-->

    <!--<bean id="userService" class="org.springframework.aop.framework.ProxyFactoryBean">-->
        <!--<property name="target" ref="userServiceImpl" />-->
        <!--<property name="interceptorNames">-->
            <!--<list>-->
                <!--<value>transactionAdvisor</value>-->
            <!--</list>-->
        <!--</property>-->
    <!--</bean>-->

    <!--<bean id="userServiceImpl" class="service.UserServiceImpl">-->
        <!--<property name="userDao" ref="userDao" />-->
        <!--<property name="mailSender" ref="mailSender" />-->
    <!--</bean>-->

    <bean id="userService" class="users.service.UserServiceImpl">
        <property name="userDao" ref="userDao" />
        <property name="mailSender" ref="mailSender" />
    </bean>

    <bean id="testUserService"
          class="users.test.UserServiceTest$TestUserService"
          parent="userService" />

    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    <!--<bean id="transactionPointcut" class="org.springframework.aop.support.NameMatchMethodPointcut">-->
        <!--<property name="mappedName" value="upgrade*" />-->
    <!--</bean>-->
    <!--<bean id="transactionPointcut" class="service.proxy.NameMatchClassMethodPointcut">-->
        <!--<property name="mappedClassName" value="*ServiceImpl" />-->
        <!--<property name="mappedName" value="upgrade*" />-->
    <!--</bean>-->

    <!--<bean id="transactionAdvice" class="service.proxy.TransactionAdvice">-->
        <!--<property name="transactionManager" ref="transactionManager" />-->
    <!--</bean>-->
    <!--<bean id="transactionPointcut" class="org.springframework.aop.aspectj.AspectJExpressionPointcut">-->
        <!--<property name="expression" value="execution(* *..*ServiceImpl.upgrade*(..))" />-->
    <!--</bean>-->
    <!--<bean id="transactionAdvisor" class="org.springframework.aop.support.DefaultPointcutAdvisor">-->
        <!--<property name="advice" ref="transactionAdvice" />-->
        <!--<property name="pointcut" ref="transactionPointcut" />-->
    <!--</bean>-->

    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" />

    <!--<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">-->
        <!--<property name="host" value="mail.server.com" />-->
    <!--</bean>-->
    <bean id="mailSender" class="users.service.DummyMailSender" />

    <!--<tx:advice id="transactionAdvice" transaction-manager="transactionManager">-->
        <!--<tx:attributes>-->
            <!--<tx:method name="get*" propagation="REQUIRED" read-only="true" timeout="30" />-->
            <!--<tx:method name="upgrade*" propagation="REQUIRES_NEW" isolation="SERIALIZABLE" />-->
            <!--<tx:method name="*" propagation="REQUIRED" />-->
        <!--</tx:attributes>-->
    <!--</tx:advice>-->

    <!--<bean id="transactionAdvice"-->
          <!--class="org.springframework.transaction.interceptor.TransactionInterceptor">-->
        <!--<property name="transactionManager" ref="transactionManager" />-->
        <!--<property name="transactionAttributes">-->
            <!--<props>-->
                <!--<prop key="get*">PROPAGATION_REQUIRED, readOnly</prop>-->
                <!--<prop key="*">PROPAGATION_REQUIRED</prop>-->
            <!--</props>-->
        <!--</property>-->
    <!--</bean>-->

    <tx:advice id="transactionAdvice">
        <tx:attributes>
            <tx:method name="get*" read-only="true"/>
            <tx:method name="*" />
        </tx:attributes>
    </tx:advice>

    <tx:annotation-driven />      <!--트랜잭션 부가기능을 담은 프록시를 추가하도록 만들어주는 후처리기-->
    <context:annotation-config /> <!-- 애노테이션으로 부가적인 빈 설정 또는 초기화 작업을 해주는 후처리기-->

    <aop:config>
        <!--<aop:pointcut id="transactionPointcut"-->
                      <!--expression="execution(* *..*ServiceImpl.upgrade*(..))" />-->
        <!--<aop:advisor advice-ref="transactionAdvice" pointcut-ref="transactionPointcut" />-->
        <aop:advisor advice-ref="transactionAdvice"
                     pointcut="bean(*Service)" />
                     <!--pointcut="execution(* *..*ServiceImpl.upgrade*(..))" />-->
    </aop:config>

    <!--<bean id="sqlService" class="learning.sql.sqlservice.BaseSqlService">-->
        <!--&lt;!&ndash;<property name="sqlmapFile" value="sqlmap.xml" />&ndash;&gt;-->
        <!--<property name="sqlReader" ref="sqlReader" />-->
        <!--<property name="sqlRegistry" ref="sqlRegistry" />-->
    <!--</bean>-->

    <!--<bean id="sqlReader" class="learning.sql.sqlreader.JaxbXmlSqlReader">-->
        <!--<property name="sqlMapFile" value="sqlmap.xml" />-->
    <!--</bean>-->
    <!--<bean id="sqlRegistry" class="learning.sql.sqlregistry.HashMapSqlRegistry"/>-->
    <!--<bean id="sqlService" class="learning.sql.sqlservice.DefaultSqlService" />-->
    <bean id="sqlService" class="users.sql.sqlservice.OxmSqlService">
        <property name="unmarshaller" ref="unmarshaller" />
        <!--<property name="sqlmap" value="classpath:dao/sqlmap.xml" />-->
        <property name="sqlRegistry" ref="sqlRegistry" />
    </bean>
    <bean id="unmarshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
        <property name="contextPath" value="users.learning.sql.jaxb" />
    </bean>
    <bean id="sqlRegistry" class="users.sql.sqlregistry.ConcurrentHashMapSqlRegistry" >
    <!--<bean id="sqlRegistry" class="learning.sql.sqlregistry.EmbeddedDBSqlRegistry">-->
        <!--<property name="dataSource" ref="embeddedDatabase" />-->
    </bean>

    <jdbc:embedded-database id="embeddedDatabase" type="HSQL">
        <jdbc:script location="classpath:/users/raw/sql/schema.sql" />
    </jdbc:embedded-database>
</beans>