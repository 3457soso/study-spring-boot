* DB 커넥션 풀 : DB 커넥션 객체를 여러 개 생성해 풀(Pool)에 담아 놓고, 필요할 때 꺼내 쓰는 방식.
  - 풀링 : 자주 쓰는 객체를 미리 만들어 놓고, 필요할 때 빌려 쓰고, 다 쓰면 반납.
  - 객체 풀 : 여러 개의 객체를 모아둔 것.

  > 왜 등장했는가?
    여러 DAO가 하나의 DB 커넥션 동시에 작업 중일 때, 하나가 뻑나면 롤백 해야 한다.
    근데 뻑난 DAO만 롤백하면 되는데 커넥션 자체가 한 개다 보니까 연결된 게 다 롤백되어 버림. # 치명적! #
    그렇다고 연결할 때마다 커넥션 객체를 생성하면 너무 느려진다.
    커넥션을 맺을 때마다 DB 서버는 사용자 인증과 권한 검사를 계속 수행하기 때문.

  > 커넥션 풀으로, DAO 마다 커넥션을 따로 만들어 서로에게 영향을 주지 않게 하면서,
    사용한 DB 커넥션 객체를 버리지 않고 풀에 보관해 재사용 함으로써 가비지 생성이나 성능 문제를 해결하자!

* DataSource : DriverManager를 통해 DB 커넥션을 얻는 것 보다 더 좋은 기법을 제공함!
  1. DataSource는 서버에서 관리하기 때문에 DB나 JDBC 드라이버가 바뀌어도 애플리케이션을 바꾸지 않아도 된다.
     기존 방법은 웹 애플리케이션 안에 DriverManager가 있었기 때문에 불편했다.
  2. Connection과 Statement 객체를 풀링할 수 있고, 분산 트랙잭션을 다룰 수 있다.
     자체적으로 커넥션풀 기능을 가지고 있음.

  # 임포트 주의 ! import javax.sql.DataSource;

  Q) 다 쓴 후 connection.close()로 닫아버리는데, 이러면 풀링이 안되는 거 아닌가?
     DataSource에서 만든 Connection 객체는 DriverManager가 만든 커넥션 객체를 한 번 더 포장한 것.
     실제로 생성한 커넥션이 아니라 PoolableConnection 객체를 반환받는데,
     여기에는 진짜 커넥션을 가리키는 _conn과 커넥션풀을 가리키는 _pool이 존재한다.
     close()로 닫으면 진짜 커넥션이 닫히는 게 아니라 대행 객체가 진짜 커넥션 객체를 풀에 반납한다.

  - 실서버에 올리기
    1) context.xml 파일에 다음 내용 추가
       <Context>
        <WatchedResource>WEB-INF/web.xml</WatchedResource>
        <Resource name="jdbc/mydb" auth="Container" type="javax.sql.DataSource"
          maxActive="10"    //최대 꺼낼 수 있는 커넥션의 최대 개수. 디폴트 8개
          maxIdle="3"       //유지할 수 있는 사용되지 않는 커넥션의 최대 개수. 디폴트 8개
          maxWait="10000"   //커넥션을 준비하기 위해 기다릴 수 있는 최대 밀리초.
          username="study"
          password="1111"
          driverClassName="com.mysql.jdbc.Driver"
          url="jdbc:mysql://localhost/mydb?useUnicode=true&amp;characterEncoding=utf8"
          closeMethod="close"/>
       </Context>

       ##### [주의] <Context> 추가하려면 기존 <Context> 지워줘야 함! 안그럼 오류남! #####

    2) DD 파일에 서버 자원을 참조한다는 선언을 해줘야 함.
       <resource-ref>
        <res-ref-name>jdbc/mydb</res-ref-name>
        <res-type>javax.sql.DataSource</res-type>
        <res-auth>Container</res-auth>
       </resource-ref>

* JNDI : Java Naming and Directory Interface의 약자로, 디렉터리 서비스에 접근하는 데 필요한 API
  - 애플리케이션은 이 API를 이용해 서버의 자원을 찾을 수 있다.
  - 자원 : 데이터베이스 서버나 메시징 시스템과 같이 다른 시스템과의 연결을 제공하는 객체
    특히 JDBC 자원을 데이터 소스라고 붙인다.
  - 자원을 서버에 등록할 때는 고유한 JNDI 이름을 붙이는데, 사용자에게 친숙한 디렉터리 경로 형태를 가짐.
    Ex) JDBC 데이터 소스 : java:comp/env/jdbc
        EJB 컴포넌트 : java:comp/ejb ...
        # [주의] com이라고 쓰면 못 찾기 때문에 오류가 발생한다!
